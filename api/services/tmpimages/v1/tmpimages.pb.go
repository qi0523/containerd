//
//Copyright The containerd Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: github.com/containerd/containerd/api/services/tmpimages/v1/tmpimages.proto

package tmpimages

import (
	types "github.com/containerd/containerd/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TmpImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name provides a unique name for the image.
	//
	// Containerd treats this as the primary identifier.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Target describes the content entry point of the image.
	Target *types.Descriptor `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *TmpImage) Reset() {
	*x = TmpImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TmpImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TmpImage) ProtoMessage() {}

func (x *TmpImage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TmpImage.ProtoReflect.Descriptor instead.
func (*TmpImage) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_rawDescGZIP(), []int{0}
}

func (x *TmpImage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TmpImage) GetTarget() *types.Descriptor {
	if x != nil {
		return x.Target
	}
	return nil
}

type GetTmpImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetTmpImageRequest) Reset() {
	*x = GetTmpImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTmpImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTmpImageRequest) ProtoMessage() {}

func (x *GetTmpImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTmpImageRequest.ProtoReflect.Descriptor instead.
func (*GetTmpImageRequest) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_rawDescGZIP(), []int{1}
}

func (x *GetTmpImageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetTmpImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image *TmpImage `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *GetTmpImageResponse) Reset() {
	*x = GetTmpImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTmpImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTmpImageResponse) ProtoMessage() {}

func (x *GetTmpImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTmpImageResponse.ProtoReflect.Descriptor instead.
func (*GetTmpImageResponse) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_rawDescGZIP(), []int{2}
}

func (x *GetTmpImageResponse) GetImage() *TmpImage {
	if x != nil {
		return x.Image
	}
	return nil
}

type CreateTmpImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image *TmpImage `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *CreateTmpImageRequest) Reset() {
	*x = CreateTmpImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTmpImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTmpImageRequest) ProtoMessage() {}

func (x *CreateTmpImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTmpImageRequest.ProtoReflect.Descriptor instead.
func (*CreateTmpImageRequest) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_rawDescGZIP(), []int{3}
}

func (x *CreateTmpImageRequest) GetImage() *TmpImage {
	if x != nil {
		return x.Image
	}
	return nil
}

type CreateTmpImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image *TmpImage `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *CreateTmpImageResponse) Reset() {
	*x = CreateTmpImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTmpImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTmpImageResponse) ProtoMessage() {}

func (x *CreateTmpImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTmpImageResponse.ProtoReflect.Descriptor instead.
func (*CreateTmpImageResponse) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTmpImageResponse) GetImage() *TmpImage {
	if x != nil {
		return x.Image
	}
	return nil
}

type DeleteTmpImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteTmpImageRequest) Reset() {
	*x = DeleteTmpImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTmpImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTmpImageRequest) ProtoMessage() {}

func (x *DeleteTmpImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTmpImageRequest.ProtoReflect.Descriptor instead.
func (*DeleteTmpImageRequest) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteTmpImageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto protoreflect.FileDescriptor

var file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_rawDesc = []byte{
	0x0a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x74, 0x6d, 0x70, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6d, 0x70,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x74, 0x6d, 0x70, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x08, 0x54, 0x6d, 0x70, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x28,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54,
	0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x6d, 0x70, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x22, 0x59, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6d, 0x70, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x74, 0x6d, 0x70, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6d, 0x70,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x5a, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x6d, 0x70, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x2b, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0xe8, 0x02, 0x0a, 0x09, 0x54, 0x6d, 0x70, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x6d,
	0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x37, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x6d, 0x70,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x6d, 0x70, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x54, 0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x34, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74,
	0x6d, 0x70, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x6d, 0x70, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x37, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x6d, 0x70, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x74, 0x6d, 0x70, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x74,
	0x6d, 0x70, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_rawDescOnce sync.Once
	file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_rawDescData = file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_rawDesc
)

func file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_rawDescGZIP() []byte {
	file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_rawDescOnce.Do(func() {
		file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_rawDescData)
	})
	return file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_rawDescData
}

var file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_goTypes = []interface{}{
	(*TmpImage)(nil),               // 0: containerd.services.tmpimages.v1.TmpImage
	(*GetTmpImageRequest)(nil),     // 1: containerd.services.tmpimages.v1.GetTmpImageRequest
	(*GetTmpImageResponse)(nil),    // 2: containerd.services.tmpimages.v1.GetTmpImageResponse
	(*CreateTmpImageRequest)(nil),  // 3: containerd.services.tmpimages.v1.CreateTmpImageRequest
	(*CreateTmpImageResponse)(nil), // 4: containerd.services.tmpimages.v1.CreateTmpImageResponse
	(*DeleteTmpImageRequest)(nil),  // 5: containerd.services.tmpimages.v1.DeleteTmpImageRequest
	(*types.Descriptor)(nil),       // 6: containerd.types.Descriptor
	(*emptypb.Empty)(nil),          // 7: google.protobuf.Empty
}
var file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_depIdxs = []int32{
	6, // 0: containerd.services.tmpimages.v1.TmpImage.target:type_name -> containerd.types.Descriptor
	0, // 1: containerd.services.tmpimages.v1.GetTmpImageResponse.image:type_name -> containerd.services.tmpimages.v1.TmpImage
	0, // 2: containerd.services.tmpimages.v1.CreateTmpImageRequest.image:type_name -> containerd.services.tmpimages.v1.TmpImage
	0, // 3: containerd.services.tmpimages.v1.CreateTmpImageResponse.image:type_name -> containerd.services.tmpimages.v1.TmpImage
	3, // 4: containerd.services.tmpimages.v1.TmpImages.InsertTmpImage:input_type -> containerd.services.tmpimages.v1.CreateTmpImageRequest
	1, // 5: containerd.services.tmpimages.v1.TmpImages.GetTmpImage:input_type -> containerd.services.tmpimages.v1.GetTmpImageRequest
	5, // 6: containerd.services.tmpimages.v1.TmpImages.Delete:input_type -> containerd.services.tmpimages.v1.DeleteTmpImageRequest
	4, // 7: containerd.services.tmpimages.v1.TmpImages.InsertTmpImage:output_type -> containerd.services.tmpimages.v1.CreateTmpImageResponse
	2, // 8: containerd.services.tmpimages.v1.TmpImages.GetTmpImage:output_type -> containerd.services.tmpimages.v1.GetTmpImageResponse
	7, // 9: containerd.services.tmpimages.v1.TmpImages.Delete:output_type -> google.protobuf.Empty
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_init() }
func file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_init() {
	if File_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TmpImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTmpImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTmpImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTmpImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTmpImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTmpImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_goTypes,
		DependencyIndexes: file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_depIdxs,
		MessageInfos:      file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_msgTypes,
	}.Build()
	File_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto = out.File
	file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_rawDesc = nil
	file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_goTypes = nil
	file_github_com_containerd_containerd_api_services_tmpimages_v1_tmpimages_proto_depIdxs = nil
}
